// src/job/JobManagement.js
import React, { useState, useEffect } from "react";
import axios from "axios";
import AddJobModal from "./AddJobModal";   // Component modal th√™m c√¥ng vi·ªác (t√πy ch·ªçn)
import EditJobModal from "./EditJobModal";   // Component modal s·ª≠a c√¥ng vi·ªác (t√πy ch·ªçn)
import JobDetailModal from "./JobDetailModal";
import "./JobManagement.css";

function JobManagement() {
  const [jobs, setJobs] = useState([]);
  const [lands, setLands] = useState([]);
  const [jobTypes, setJobTypes] = useState([]);
  const [employees, setEmployees] = useState([]); // Danh s√°ch nh√¢n vi√™n
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState("");
  const [currentPage, setCurrentPage] = useState(1);
  const [showAddForm, setShowAddForm] = useState(false);
  const [editJob, setEditJob] = useState(null);
  const [detailJob, setDetailJob] =useState(null)
  const jobsPerPage = 5; // S·ªë l∆∞·ª£ng b·∫£n ghi hi·ªÉn th·ªã tr√™n m·ªói trang

  useEffect(() => {
    fetchAllData();
  }, []);

  // Fetch ƒë·ªìng th·ªùi jobs, lands, jobTypes v√† employees
  const fetchAllData = async () => {
    setLoading(true);
    try {
      const [jobsRes, landsRes, jobTypesRes, employeesRes] = await Promise.all([
        axios.get("http://localhost:8080/api/jobs"),
        axios.get("http://localhost:8080/api/lands"),
        axios.get("http://localhost:8080/api/jobtypes"),
        axios.get("http://localhost:8080/api/users"), // ƒê·ªãa ch·ªâ endpoint c·ªßa UsersController
      ]);

      const jobsData = Array.isArray(jobsRes.data) ? jobsRes.data : [];
      const landsData = Array.isArray(landsRes.data) ? landsRes.data : [];
      const jobTypesData = Array.isArray(jobTypesRes.data) ? jobTypesRes.data : [];
      const employeesData = Array.isArray(employeesRes.data) ? employeesRes.data : [];

      setJobs(jobsData);
      setLands(landsData);
      setJobTypes(jobTypesData);
      setEmployees(employeesData);
      setError("");
    } catch (err) {
      console.error("L·ªói khi t·∫£i d·ªØ li·ªáu:", err);
      setError("Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu. H√£y ki·ªÉm tra API.");
    } finally {
      setLoading(false);
    }
  };

  const handleEdit = (job) => {
    setEditJob(job);
  };

  const handleAdd = () => {
    setShowAddForm(true);
  };

  // H√†m tr·ª£ gi√∫p: L·∫•y t√™n c·ªßa ƒë·∫•t theo landId (s·ª≠ d·ª•ng thu·ªôc t√≠nh location)
  const getLandName = (landId) => {
    const land = lands.find((l) => l.id === landId);
    return land ? land.location : landId;
  };

  // H√†m tr·ª£ gi√∫p: L·∫•y t√™n c·ªßa job type theo jobTypeId
  const getJobTypeName = (jobTypeId) => {
    const jobType = jobTypes.find((jt) => jt.id === jobTypeId);
    return jobType ? jobType.name : jobTypeId;
  };

  // H√†m tr·ª£ gi√∫p: L·∫•y t√™n c·ªßa nh√¢n vi√™n theo assignedTo (ID) d·ª±a tr√™n thu·ªôc t√≠nh fullName
  const getEmployeeName = (employeeId) => {
    const employee = employees.find((emp) => emp.id === employeeId);
    return employee ? employee.fullName : employeeId;
  };

  // H√†m chuy·ªÉn ƒë·ªïi tr·∫°ng th√°i t·ª´ ti·∫øng Anh sang ti·∫øng Vi·ªát
  const getVietnameseStatus = (status) => {
    const normalized = status.replace("_", " ").trim().toLowerCase();
    if (normalized === "in progress") return "ƒêang ti·∫øn h√†nh";
    if (normalized === "paused") return "T·∫°m d·ª´ng";
    if (normalized === "completed") return "Ho√†n th√†nh";
    return status;
  };

  // H√†m x·ª≠ l√Ω t·∫°m d·ª´ng ho·∫∑c l√†m l·∫°i c√¥ng vi·ªác (n·∫øu ch∆∞a ho√†n th√†nh)
  const handleTogglePauseResume = async (job) => {
    const normalizedStatus = job.status.replace("_", " ").trim().toLowerCase();
    if (normalizedStatus === "completed") {
      alert("C√¥ng vi·ªác ƒë√£ ho√†n th√†nh, kh√¥ng th·ªÉ chuy·ªÉn tr·∫°ng th√°i.");
      return;
    }
    let confirmMsg = "";
    let newStatus = "";
    console.log("Tr·∫°ng th√°i hi·ªán t·∫°i c·ªßa job:", job.status);

    if (normalizedStatus === "in progress") {
      confirmMsg = "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën t·∫°m d·ª´ng c√¥ng vi·ªác n√†y?";
      newStatus = "Paused";
    } else if (normalizedStatus === "paused") {
      confirmMsg = "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën l√†m l·∫°i c√¥ng vi·ªác n√†y?";
      newStatus = "In progress";
    } else {
      console.log("Kh√¥ng x·ª≠ l√Ω cho tr·∫°ng th√°i:", normalizedStatus);
      return;
    }

    if (window.confirm(confirmMsg)) {
      try {
        const updatedJob = { ...job, status: newStatus };
        await axios.put(`http://localhost:8080/api/jobs/${job.id}`, updatedJob);
        setJobs(jobs.map((j) => (j.id === job.id ? updatedJob : j)));
      } catch (err) {
        console.error("L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i c√¥ng vi·ªác:", err);
        alert("Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i c√¥ng vi·ªác.");
      }
    }
  };

  // H√†m x·ª≠ l√Ω ho√†n th√†nh c√¥ng vi·ªác (ch·ªâ √°p d·ª•ng n·∫øu ch∆∞a ho√†n th√†nh)
  const handleCompleteJob = async (job) => {
    const normalizedStatus = job.status.replace("_", " ").trim().toLowerCase();
    if (normalizedStatus === "completed") {
      alert("C√¥ng vi·ªác ƒë√£ ho√†n th√†nh.");
      return;
    }
    if (window.confirm("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ho√†n th√†nh c√¥ng vi·ªác n√†y?")) {
      try {
        const updatedJob = { ...job, status: "Completed" };
        await axios.put(`http://localhost:8080/api/jobs/${job.id}`, updatedJob);
        setJobs(jobs.map((j) => (j.id === job.id ? updatedJob : j)));
      } catch (err) {
        console.error("L·ªói khi ho√†n th√†nh c√¥ng vi·ªác:", err);
        alert("Kh√¥ng th·ªÉ ho√†n th√†nh c√¥ng vi·ªác.");
      }
    }
  };

  // Ph√¢n trang d·ªØ li·ªáu
  const indexOfLastJob = currentPage * jobsPerPage;
  const indexOfFirstJob = indexOfLastJob - jobsPerPage;
  const currentJobs = jobs.slice(indexOfFirstJob, indexOfLastJob);
  const totalPages = Math.ceil(jobs.length / jobsPerPage);

  return (
    <div className="job-management">
      <div className="header-section">
        <h2>Qu·∫£n l√Ω C√¥ng Vi·ªác</h2>
        <button className="add-job-button" onClick={handleAdd}>
          <span className="plus-icon">+</span>
          Th√™m m·ªõi
        </button>
      </div>

      {loading && (
        <div className="loading-overlay">
          <div className="loader"></div>
        </div>
      )}

      {error && <div className="error-message">{error}</div>}

      {!loading && !error && (
        <div className="table-container">
          <table className="job-table">
            <thead>
              <tr>
                <th>M√£</th>
                <th>ƒê·∫•t</th>
                <th>Lo·∫°i C√¥ng Vi·ªác</th>
                <th>Tr·∫°ng Th√°i</th>
                <th>Ph√¢n C√¥ng</th>
                <th>M√¥ T·∫£</th>
                <th>H√†nh ƒê·ªông</th>
              </tr>
            </thead>
            <tbody>
  {currentJobs.map((job) => {
    const normalizedStatus = job.status.replace("_", " ").trim().toLowerCase();
    let rowClass = "";
    if (normalizedStatus === "paused") {
      rowClass = "paused-job";
    } else if (normalizedStatus === "completed") {
      rowClass = "completed-job";
    }
    return (
      <tr key={job.id} className={rowClass} onClick={() => setDetailJob(job)} style={{ cursor: "pointer" }}>
        <td>{job.id}</td>
        <td>{getLandName(job.landId)}</td>
        <td>{getJobTypeName(job.jobTypeId)}</td>
        <td>{getVietnameseStatus(job.status)}</td>
        <td>{getEmployeeName(job.assignedTo)}</td>
        <td>{job.description}</td>
        <td>
          <div className="action-buttons">
            <button className="edit-button" onClick={(e) => { e.stopPropagation(); handleEdit(job); }}>
              üëÅÔ∏è
            </button>
            {normalizedStatus !== "completed" && (
              <>
                <button className="pause-resume-button" onClick={(e) => { e.stopPropagation(); handleTogglePauseResume(job); }}>
                  {normalizedStatus === "in progress" ? "‚è∏Ô∏è" : normalizedStatus === "paused" ? "‚ñ∂Ô∏è" : ""}
                </button>
                {normalizedStatus === "in progress" && (
                  <button className="complete-button" onClick={(e) => { e.stopPropagation(); handleCompleteJob(job); }}>
                    ‚úÖ
                  </button>
                )}
              </>
            )}
          </div>
        </td>
      </tr>
    );
  })}
</tbody>


          </table>
          <div className="pagination">
            {Array.from({ length: totalPages }, (_, index) => (
              <button
                key={index + 1}
                className={currentPage === index + 1 ? "active" : ""}
                onClick={() => setCurrentPage(index + 1)}
              >
                {index + 1}
              </button>
            ))}
          </div>
        </div>
      )}

      {/* Hi·ªÉn th·ªã modal th√™m c√¥ng vi·ªác */}
      {showAddForm && (
        <AddJobModal onClose={() => setShowAddForm(false)} onJobAdded={fetchAllData} />
      )}

      {/* Hi·ªÉn th·ªã modal s·ª≠a c√¥ng vi·ªác */}
      {editJob && (
        <EditJobModal job={editJob} onClose={() => setEditJob(null)} onJobUpdated={fetchAllData} />
      )}
      {/* Hi·ªÉn th·ªã modal s·ª≠a c√¥ng vi·ªác */}
      {detailJob && (
  <JobDetailModal job={detailJob} onClose={() => setDetailJob(null)} onJobUpdated={fetchAllData} />
)}
    </div>
  );
}

export default JobManagement;
